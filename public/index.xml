<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Knut Behrends Personal Blog, v3</title>
    <link>/</link>
    <description>Recent content on Knut Behrends Personal Blog, v3</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy;2018 Knut Behrends</copyright>
    <lastBuildDate>Sun, 26 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>More about the Hugo Software</title>
      <link>/about/more-about-the-hugo-software/</link>
      <pubDate>Sun, 26 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/about/more-about-the-hugo-software/</guid>
      <description>Links important to me  Hugo   Hugo Documentation:: predefined variables Click on the link to go to the Hugo Documentation, (predefined variables). Hugo Documentation: Content Management Hugo Shortcodes       R Markdown  RMarkdown Cheat Sheet Blogdown Book       Go  Webapps with Go Go Docs   </description>
    </item>
    
    <item>
      <title>More about the Hugo Software</title>
      <link>/about/more-about-the-hugo-software/</link>
      <pubDate>Thu, 23 Nov 2017 20:23:59 +0530</pubDate>
      
      <guid>/about/more-about-the-hugo-software/</guid>
      <description>Links important to me: Blogdown Book &amp;ndash; Hugo Documentation &amp;ndash; Hugo Shortcodes &amp;ndash; Webapps with Go &amp;ndash; Go Docs</description>
    </item>
    
    <item>
      <title>My first blog posts</title>
      <link>/about/</link>
      <pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>üê£ I‚Äôve made a new attempt to start blogging in November 2017.
Still experimenting with the Hugo software.</description>
    </item>
    
    <item>
      <title>Gallery: 3D stuff</title>
      <link>/gallery/3d/</link>
      <pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/gallery/3d/</guid>
      <description>TEST There should be a 3D scene below  A red cube oribiting two other cubes This 3D scene is from a Pluralsight course on WebGL/three.js fundamentals by Alex Mackey. I have included this example here for testing purposes. I want to have a reference, or a simpler alternative, for verifying that exporting 3D plots from the R package \(threejs\) works.
// Some javascript for debugging: example.scene.getObjectByName(&amp;quot;box&amp;quot;);      Links to threejs stuff:</description>
    </item>
    
    <item>
      <title>Testing stuff</title>
      <link>/about/testing/</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/about/testing/</guid>
      <description>var lodash = _.noConflict();  DOES ONLY WORK ON CHROME: mtcars %&amp;gt;% ggvis(~disp, ~mpg) %&amp;gt;% layer_points()    Renderer: SVG | Canvas   Download      var plot_id386320900_spec = { &#34;data&#34;: [ { &#34;name&#34;: &#34;.0&#34;, &#34;format&#34;: { &#34;type&#34;: &#34;csv&#34;, &#34;parse&#34;: { &#34;disp&#34;: &#34;number&#34;, &#34;mpg&#34;: &#34;number&#34; } }, &#34;values&#34;: &#34;\&#34;disp\&#34;,\&#34;mpg\&#34;\n160,21\n160,21\n108,22.8\n258,21.4\n360,18.7\n225,18.1\n360,14.3\n146.7,24.4\n140.8,22.8\n167.6,19.2\n167.6,17.8\n275.8,16.4\n275.8,17.3\n275.8,15.2\n472,10.4\n460,10.4\n440,14.7\n78.7,32.4\n75.7,30.4\n71.1,33.9\n120.1,21.5\n318,15.5\n304,15.2\n350,13.3\n400,19.2\n79,27.3\n120.3,26\n95.1,30.4\n351,15.8\n145,19.7\n301,15\n121,21.4&#34; }, { &#34;name&#34;: &#34;scale/x&#34;, &#34;format&#34;: { &#34;type&#34;: &#34;csv&#34;, &#34;parse&#34;: { &#34;</description>
    </item>
    
    <item>
      <title>UK NHS Medical Staff, 2009-2017</title>
      <link>/post/2018/01/uk-nhs-nurses/</link>
      <pubDate>Wed, 24 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/uk-nhs-nurses/</guid>
      <description>#NHSCrisis? A quick fact check about the UK‚Äôs National Healthcare Service, NHS.</description>
    </item>
    
    <item>
      <title>UK NHS Medical Staff, 2009-2017</title>
      <link>/post/2018/01/uk-nhs-nurses/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/uk-nhs-nurses/</guid>
      <description>#NHSCrisis? A quick fact check about the National Healthcare Service, NHS. Is the number of nurses in the UK really strongly decreasing, as some media outlets suggest? Or is the opposite true, as some people on Twitter have argued? In this post I am taking a quick look at the number of employees in British healthcare system, from 2009 to 2017.  Since 2014, the number of nurses indeed has decreased for most subtypes.</description>
    </item>
    
    <item>
      <title>Global Interest in Bitcoin over Time</title>
      <link>/post/2018/01/bitcoin-interest/</link>
      <pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/bitcoin-interest/</guid>
      <description>Visualizing (1) Wikipedia Pageviews, (2) NYT Article Mentions, (3) Google Searches and (4) Exchange Rates from 2012 to early 2018.</description>
    </item>
    
    <item>
      <title>rmarkdown example with external js</title>
      <link>/about/2018-01-20--rmarkdown-with-eternal-js/</link>
      <pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/about/2018-01-20--rmarkdown-with-eternal-js/</guid>
      <description>Let‚Äôs create a very basic graph using the d3.js Javascript library. Include it in the body tag of the page fpr now:
   // from https://www.dashingd3js.com/svg-paths-and-d3js //The data for our line var lineData = [ { &#34;x&#34;: 1, &#34;y&#34;: 5}, { &#34;x&#34;: 20, &#34;y&#34;: 20}, { &#34;x&#34;: 40, &#34;y&#34;: 10}, { &#34;x&#34;: 60, &#34;y&#34;: 40}, { &#34;x&#34;: 80, &#34;y&#34;: 5}, { &#34;x&#34;: 100, &#34;y&#34;: 60}]; //This is the accessor function we talked about above var lineFunction = d3.</description>
    </item>
    
    <item>
      <title>Global interest in Bitcoin over Time</title>
      <link>/post/2018/01/bitcoin-interest/</link>
      <pubDate>Sat, 20 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/bitcoin-interest/</guid>
      <description>Bitcoin: Visualizing (1) Wikipedia Pageviews, (2) Mentions in the New York Times, (3) Google Searches and (4) Exchange Rates from 2015 to early 2018. Simple timeseries plots (created from Web-API data) show that these four are strongly correlated, except when they aren&amp;apos;t.  In this post I‚Äôll display global interest in Bitcoin and Ethereum over time, according to accesses to their Wikipedia articles, mentions in the New York Times, and as Google Searches.</description>
    </item>
    
    <item>
      <title>Graphs (in the sense of networks)</title>
      <link>/post/2018/01/drawing-a-figshare-network-with-ggraph-and-tidygraph/</link>
      <pubDate>Tue, 16 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/drawing-a-figshare-network-with-ggraph-and-tidygraph/</guid>
      <description>NOTE This blogpost is inspired by this one: Drawing a network with &#34;ggraph&#34; and &#34;tidygraph&#34; by Ken Butler. 
 Example: the Figshare categories Data provider Figshare models their contents with and elaborate hierarchy of disciplines.
I‚Äôm trying to learn the differences between using the igraph library directly and the new packages ggraph and tidygraph. Both new packages were authored by Thomas Lin Pedersen. created two R packages: tidygraph for storing and handling graphs, and ggraph for drawing them, ggplot-style.</description>
    </item>
    
    <item>
      <title>Gallery: Abstracts (coming soon)</title>
      <link>/gallery/gallery_abstract/</link>
      <pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/gallery/gallery_abstract/</guid>
      <description>Gallery: Abstracts coming soon</description>
    </item>
    
    <item>
      <title>Comparing 33C3 and 34C3 tweets</title>
      <link>/post/2018/01/tweets-33c3-vs-33c4/</link>
      <pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/tweets-33c3-vs-33c4/</guid>
      <description>Analysing the inspiring tweets from the CCC community (Draft)</description>
    </item>
    
    <item>
      <title>Comparing 33C3 and 34C3 tweets</title>
      <link>/post/2018/01/tweets-33c3-vs-33c4/</link>
      <pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/tweets-33c3-vs-33c4/</guid>
      <description>Why this analysis? There are two reasons:
 learn to process Twitter data at scale (~100MB-1GB/file - that‚Äôs large enough for me) get more info from/about the inspiring tweets from the CCC community  (This blogpost ist still a DRAFT - I want to publish quickly, even when an analysis is incomplete, or the text is a bit rough in places)
 Background Occasionally, over the last two years, I have gathered data from the Twitter Streaming API.</description>
    </item>
    
    <item>
      <title>Some Gists</title>
      <link>/post/2018/01/some-gists/</link>
      <pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/some-gists/</guid>
      <description>Small Link collection for my own personal use.</description>
    </item>
    
    <item>
      <title>Some Gists</title>
      <link>/post/2018/01/some-gists/</link>
      <pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/some-gists/</guid>
      <description>Link Collection for my own personal use Github ‚ÄòGists‚Äô are code samples that are too short for, or not worth creating a new standalone repository.
For example
 One-off scripts unfinished/half-working scripts forked github gists from other people copies of codesamples from other people, slightly edited or customized  This webpage is just for my own personal use, a reminder for myself.
For now, I list only the links to the gists.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/2018/01/constructing-a-tiny-social-network-visualization-from-the-rstats-hashtag/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/constructing-a-tiny-social-network-visualization-from-the-rstats-hashtag/</guid>
      <description>Analysis of ~1000 tweets about the R language. Visualing the interactions of the active Twitter users as a directed graph. (Draft)</description>
    </item>
    
    <item>
      <title>Constructing a tiny social-network visualization from the #Rstats hashtag</title>
      <link>/post/2018/01/constructing-a-tiny-social-network-visualization-from-the-rstats-hashtag/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/constructing-a-tiny-social-network-visualization-from-the-rstats-hashtag/</guid>
      <description>(Under Construction) In 2016, I was harvesting tweets from the Twitter streaming API. I‚Äôve used the #rstats hashtag as the search filter. This hashtag is commonly used by the R community on Twitter. Tag #rstats is more descriptive than the too short, unusable, #R hashtag which may not even be a valid filter expression.
Here I do some exploratory analysis of these ~ 1000 tweets, and I visualize the interactions (the ‚Äúmentions‚Äù) of the active Twitter users as a directed graph.</description>
    </item>
    
    <item>
      <title>Soccer-Database: Extracting goal data from XML fragments</title>
      <link>/post/2017/12/database/</link>
      <pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/12/database/</guid>
      <description>Using R to process XML fragments stored in a relational database.</description>
    </item>
    
    <item>
      <title>Soccer-Database: Extracting goal data from XML fragments</title>
      <link>/post/2017/12/database/</link>
      <pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/12/database/</guid>
      <description>This is part 2 of a 3-part series about Statistical Analysis of Soccer data.
 Part 1 shows the database diagram of the Sqlite database mentioned below. Part 2 (this page) describes how to preprocess some text data that was stored in an cryptic format inside the database Part 3 (not written yet) describes some statistical analysis of some aspect of this dataset.  Dataset The dataset used here is the ‚ÄúEuropean Soccer Database‚Äù - 25k+ matches, players &amp;amp; teams attributes for European Professional Football from Kaggle.</description>
    </item>
    
    <item>
      <title>Soccer-Database: Generating schema diagrams</title>
      <link>/post/2017/12/soccerdb-schema-diagrams/</link>
      <pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/12/soccerdb-schema-diagrams/</guid>
      <description>This blog post shows 3 times the same database diagram, at varying levels of detail.</description>
    </item>
    
    <item>
      <title>Soccer-Database: Generating schema diagrams</title>
      <link>/post/2017/12/soccerdb-schema-diagrams/</link>
      <pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/12/soccerdb-schema-diagrams/</guid>
      <description>This is part 1 of a 3-part series of small blog posts about my first attempts at Bayesian Analysis of Soccer data.
In order to get started I had to invest much more effort than expected into cleaning the data and getting familiar with it.
tl;dr: This blog post shows 3 times the same database diagram, at varying levels of detail.
Dataset The dataset used here is the &amp;ldquo;European Soccer Database&amp;rdquo; - 25k+ matches, players &amp;amp; teams attributes for European Professional Football from Kaggle.</description>
    </item>
    
    <item>
      <title>Learning jq</title>
      <link>/post/2017/12/learning-jq/</link>
      <pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/12/learning-jq/</guid>
      <description>A grabbag of jq commands Some notes about learning jq, the lightweight and flexible command-line JSON processor.
 </description>
    </item>
    
    <item>
      <title>Learning jq</title>
      <link>/post/2017/12/learning-jq/</link>
      <pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/12/learning-jq/</guid>
      <description>A grabbag of commands  Some notes about learning jq, the lightweight and flexible command-line JSON processor. I&amp;apos;ll extend and improve this blog post in the next months, in Q1/2018. This page is a notepad for my own use, it has not the purpose to teach anyone. I need to be fluent with the JSON parsing tool jq. Very often I have to interact with JSON data: When I interact with APIs, when parsing scraped Twitter data, when doing SPARQL queries‚Ä¶</description>
    </item>
    
    <item>
      <title>Soccer Euro 2016 - Betting At My Workplace - Part 2</title>
      <link>/post/2017/12/soccer-world-cup-bets-part-ii/</link>
      <pubDate>Sat, 09 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/12/soccer-world-cup-bets-part-ii/</guid>
      <description>Soccer championship Euro 2016 - A weekend project, from July 2016 Continued from a previous blog post, that explained the data preprocessing steps.
 I wrote this in July 2016 to make myself familiar with the R package ggplot2, and other tidyverse packages. This post contains exploratory analysis of an Euro 2016 Betting Game. Predictions were made, just for fun and a small amount of prize money, by a group of players at my workplace.</description>
    </item>
    
    <item>
      <title>Soccer Euro 2016 - Betting At My Workplace - Part I</title>
      <link>/post/2017/12/soccer-world-cup-bets-part-i/</link>
      <pubDate>Sat, 09 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/12/soccer-world-cup-bets-part-i/</guid>
      <description>Soccer championship Euro 2016 - A weekend project, from July 2016 This is the data-preprocessing part of a blog post that has most of its visual content in a second part.
Part 1: preprocessing the data  I wrote this in July 2016, to make myself familiar with the R packages ggplot2 and other tidyverse packages. Exploratory Analysis of an Euro 2016 Betting Game. Predictions were made, just for fun (and a small amount of prize money), by a group of players (colleagues, their friends and family members) from my workplace in Germany.</description>
    </item>
    
    <item>
      <title>Soccer World Cup 2016 - Betting At My Workplace - Part I&#43;II</title>
      <link>/post/2017/12/soccer-world-cup-bets-part-ii/</link>
      <pubDate>Sat, 09 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/12/soccer-world-cup-bets-part-ii/</guid>
      <description>A weekend project from Summer 2016</description>
    </item>
    
    <item>
      <title>Body Height and BMI in European Soccer Players over the years 2008-2016</title>
      <link>/post/2017/12/body-height-and-bmi-in-european-soccer-players-over-the-years-2008-2016/</link>
      <pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/12/body-height-and-bmi-in-european-soccer-players-over-the-years-2008-2016/</guid>
      <description>How did Body Mass Index and body size of professional football players change over the years 2008-2016? Body size, not so much. It has stayed rather constant. Average height, body weight and Body Mass Index have fallen.</description>
    </item>
    
    <item>
      <title>Body Height and BMI in European Soccer Players over the years 2008-2016</title>
      <link>/post/2017/12/body-height-and-bmi-in-european-soccer-players-over-the-years-2008-2016/</link>
      <pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/12/body-height-and-bmi-in-european-soccer-players-over-the-years-2008-2016/</guid>
      <description>Change of body parameters in soccer players  How did body mass index and body size of professional football players change over the years? Body size, not so much. It has stayed rather constant between 2008 and 2016. Average height might have even fallen a little bit. Body weight and, correspondingly, Body Mass Index on the other hand, have fallen even more. This means the top clubs want thinner players. It also means, in soccer, possibilities to increase the athleticism of players is limited.</description>
    </item>
    
    <item>
      <title>The oldest European Soccer Players in the late 2000s</title>
      <link>/post/2017/12/the-oldest-active-european-soccer-player-in-season-2008/</link>
      <pubDate>Sun, 03 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/12/the-oldest-active-european-soccer-player-in-season-2008/</guid>
      <description>While doing some quality-checks in Kaggle Dataset ‚ÄúEuropean Soccer Database‚Äù, I found that in the late 2000s most of the oldest professional players active in top clubs were goalkeepers. Another veteran midfielder was Tugay Kerimoƒülu, from Turkey. Born in 1970, he played the English Premier League until‚Ä¶ when, exactly?</description>
    </item>
    
    <item>
      <title>The oldest active European Soccer Player in season 2008</title>
      <link>/post/2017/12/the-oldest-active-european-soccer-player-in-season-2008/</link>
      <pubDate>Sun, 03 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/12/the-oldest-active-european-soccer-player-in-season-2008/</guid>
      <description>Still playing with a Soccer Database from Kaggle.com  As an exercise, I wanted to find the oldest players participating in any match. During my analysis I also learned something about the data quality of this Kaggle dataset.
 As mentioned in a previous blogpost, I‚Äôve downloaded a zipfile (36 MB) with Football data from data science community Kaggle.com. The archive contained an SQLite Database.
library(DBI) con &amp;lt;- dbConnect(odbc::odbc(), &amp;quot;well-sqlite-footballdb&amp;quot;) For the sake of brevity, to see the R packages I‚Äôve included to process the data, see the previous blogpost.</description>
    </item>
    
    <item>
      <title>European Soccer Players and their BMI</title>
      <link>/post/2017/11/european-soccer-players-and-their-bmi/</link>
      <pubDate>Wed, 22 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/11/european-soccer-players-and-their-bmi/</guid>
      <description>Players in European soccer leagues have a Body Mass Index (BMI) that is normally distributed with a mean of 23 and an sd of 1.3. This is independent of body size.</description>
    </item>
    
    <item>
      <title>European Soccer Players and their BMI</title>
      <link>/post/2017/11/european-soccer-players-and-their-bmi/</link>
      <pubDate>Wed, 22 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/11/european-soccer-players-and-their-bmi/</guid>
      <description>Playing with a Soccer Database from Kaggle.com Recently I‚Äôve downloaded as a zipfile (36 MB) from data science community Kaggle.com.
This zipfile contains a single file, a 313 MB sqlite Database. Let‚Äôs take a peek what‚Äôs inside:
Create connection to football DB
library(DBI) con &amp;lt;- dbConnect(odbc::odbc(), &amp;quot;well-sqlite-footballdb&amp;quot;) Read in R packages necessary to load the data:
# tidyverse packages library(dplyr, warn.conflicts = FALSE) # library(purrr) # functional programming library(stringr) library(lubridate) # strings to datetime library(ggplot2) library(NHANES) # US health data data(NHANES) theme_set(theme_bw()) The database consists of 7 tables.</description>
    </item>
    
    <item>
      <title></title>
      <link>/about/header_include_d3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/header_include_d3/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>